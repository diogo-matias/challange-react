{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport var validateEmail = function validateEmail(email) {\n  if (!email) return 'Email é obrigatório';\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return 'Email inválido';\n  }\n  return null;\n};\nexport var validateUsername = function validateUsername(username) {\n  if (!username) return 'Usuário é obrigatório';\n  if (username.length < 3) {\n    return 'Usuário deve ter pelo menos 3 caracteres';\n  }\n  if (username.length > 50) {\n    return 'Usuário deve ter no máximo 50 caracteres';\n  }\n  var usernameRegex = /^[a-zA-Z0-9_]+$/;\n  if (!usernameRegex.test(username)) {\n    return 'Usuário deve conter apenas letras, números e underscore';\n  }\n  return null;\n};\nexport var validatePassword = function validatePassword(password) {\n  if (!password) return 'Senha é obrigatória';\n  if (password.length < 6) {\n    return 'Senha deve ter pelo menos 6 caracteres';\n  }\n  if (password.length > 100) {\n    return 'Senha deve ter no máximo 100 caracteres';\n  }\n  return null;\n};\nexport var validateName = function validateName(name) {\n  if (!name) return 'Nome é obrigatório';\n  if (name.length < 2) {\n    return 'Nome deve ter pelo menos 2 caracteres';\n  }\n  if (name.length > 100) {\n    return 'Nome deve ter no máximo 100 caracteres';\n  }\n  var nameRegex = /^[a-zA-ZÀ-ÿ\\s]+$/;\n  if (!nameRegex.test(name)) {\n    return 'Nome deve conter apenas letras';\n  }\n  return null;\n};\nexport var validateDate = function validateDate(date) {\n  if (!date) return 'Data é obrigatória';\n  if (!date.includes('/')) {\n    return 'Data deve estar no formato DD/MM/AAAA';\n  }\n  var _date$split = date.split('/'),\n    _date$split2 = _slicedToArray(_date$split, 3),\n    day = _date$split2[0],\n    month = _date$split2[1],\n    year = _date$split2[2];\n  if (!day || !month || !year) {\n    return 'Data deve estar no formato DD/MM/AAAA';\n  }\n  var dayNum = parseInt(day);\n  var monthNum = parseInt(month);\n  var yearNum = parseInt(year);\n  if (isNaN(dayNum) || isNaN(monthNum) || isNaN(yearNum)) {\n    return 'Data deve conter apenas números';\n  }\n  if (dayNum < 1 || dayNum > 31) {\n    return 'Dia deve estar entre 1 e 31';\n  }\n  if (monthNum < 1 || monthNum > 12) {\n    return 'Mês deve estar entre 1 e 12';\n  }\n  if (yearNum < 1900 || yearNum > new Date().getFullYear()) {\n    return 'Ano deve estar entre 1900 e o ano atual';\n  }\n  var dateObj = new Date(yearNum, monthNum - 1, dayNum);\n  if (dateObj.getDate() !== dayNum || dateObj.getMonth() !== monthNum - 1 || dateObj.getFullYear() !== yearNum) {\n    return 'Data inválida';\n  }\n  if (dateObj > new Date()) {\n    return 'Data não pode ser no futuro';\n  }\n  return null;\n};\nexport var validateValue = function validateValue(value) {\n  if (!value) return 'Valor é obrigatório';\n  var numValue = parseFloat(value);\n  if (isNaN(numValue)) {\n    return 'Valor deve ser um número';\n  }\n  if (numValue <= 0) {\n    return 'Valor deve ser maior que zero';\n  }\n  if (numValue > 1000000) {\n    return 'Valor deve ser menor que R$ 1.000.000';\n  }\n  return null;\n};\nexport var formatDateForBackend = function formatDateForBackend(dateString) {\n  if (!dateString) return '';\n  if (dateString.includes('/')) {\n    var _dateString$split = dateString.split('/'),\n      _dateString$split2 = _slicedToArray(_dateString$split, 3),\n      day = _dateString$split2[0],\n      month = _dateString$split2[1],\n      year = _dateString$split2[2];\n    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n  }\n  return dateString;\n};","map":{"version":3,"names":["validateEmail","email","emailRegex","test","validateUsername","username","length","usernameRegex","validatePassword","password","validateName","name","nameRegex","validateDate","date","includes","_date$split","split","_date$split2","_slicedToArray","day","month","year","dayNum","parseInt","monthNum","yearNum","isNaN","Date","getFullYear","dateObj","getDate","getMonth","validateValue","value","numValue","parseFloat","formatDateForBackend","dateString","_dateString$split","_dateString$split2","padStart"],"sources":["C:/Users/diogo/OneDrive/Desktop/learning/loja-challenge/frontend/src/utils/validation.ts"],"sourcesContent":["export const validateEmail = (email: string): string | null => {\r\n  if (!email) return 'Email é obrigatório';\r\n  \r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(email)) {\r\n    return 'Email inválido';\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const validateUsername = (username: string): string | null => {\r\n  if (!username) return 'Usuário é obrigatório';\r\n  \r\n  if (username.length < 3) {\r\n    return 'Usuário deve ter pelo menos 3 caracteres';\r\n  }\r\n  \r\n  if (username.length > 50) {\r\n    return 'Usuário deve ter no máximo 50 caracteres';\r\n  }\r\n  \r\n  const usernameRegex = /^[a-zA-Z0-9_]+$/;\r\n  if (!usernameRegex.test(username)) {\r\n    return 'Usuário deve conter apenas letras, números e underscore';\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const validatePassword = (password: string): string | null => {\r\n  if (!password) return 'Senha é obrigatória';\r\n  \r\n  if (password.length < 6) {\r\n    return 'Senha deve ter pelo menos 6 caracteres';\r\n  }\r\n  \r\n  if (password.length > 100) {\r\n    return 'Senha deve ter no máximo 100 caracteres';\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const validateName = (name: string): string | null => {\r\n  if (!name) return 'Nome é obrigatório';\r\n  \r\n  if (name.length < 2) {\r\n    return 'Nome deve ter pelo menos 2 caracteres';\r\n  }\r\n  \r\n  if (name.length > 100) {\r\n    return 'Nome deve ter no máximo 100 caracteres';\r\n  }\r\n  \r\n  const nameRegex = /^[a-zA-ZÀ-ÿ\\s]+$/;\r\n  if (!nameRegex.test(name)) {\r\n    return 'Nome deve conter apenas letras';\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const validateDate = (date: string): string | null => {\r\n  if (!date) return 'Data é obrigatória';\r\n  \r\n  if (!date.includes('/')) {\r\n    return 'Data deve estar no formato DD/MM/AAAA';\r\n  }\r\n  \r\n  const [day, month, year] = date.split('/');\r\n  \r\n  if (!day || !month || !year) {\r\n    return 'Data deve estar no formato DD/MM/AAAA';\r\n  }\r\n  \r\n  const dayNum = parseInt(day);\r\n  const monthNum = parseInt(month);\r\n  const yearNum = parseInt(year);\r\n  \r\n  if (isNaN(dayNum) || isNaN(monthNum) || isNaN(yearNum)) {\r\n    return 'Data deve conter apenas números';\r\n  }\r\n  \r\n  if (dayNum < 1 || dayNum > 31) {\r\n    return 'Dia deve estar entre 1 e 31';\r\n  }\r\n  \r\n  if (monthNum < 1 || monthNum > 12) {\r\n    return 'Mês deve estar entre 1 e 12';\r\n  }\r\n  \r\n  if (yearNum < 1900 || yearNum > new Date().getFullYear()) {\r\n    return 'Ano deve estar entre 1900 e o ano atual';\r\n  }\r\n  \r\n  const dateObj = new Date(yearNum, monthNum - 1, dayNum);\r\n  if (dateObj.getDate() !== dayNum || dateObj.getMonth() !== monthNum - 1 || dateObj.getFullYear() !== yearNum) {\r\n    return 'Data inválida';\r\n  }\r\n  \r\n  if (dateObj > new Date()) {\r\n    return 'Data não pode ser no futuro';\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const validateValue = (value: string): string | null => {\r\n  if (!value) return 'Valor é obrigatório';\r\n  \r\n  const numValue = parseFloat(value);\r\n  if (isNaN(numValue)) {\r\n    return 'Valor deve ser um número';\r\n  }\r\n  \r\n  if (numValue <= 0) {\r\n    return 'Valor deve ser maior que zero';\r\n  }\r\n  \r\n  if (numValue > 1000000) {\r\n    return 'Valor deve ser menor que R$ 1.000.000';\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const formatDateForBackend = (dateString: string): string => {\r\n  if (!dateString) return '';\r\n  \r\n  if (dateString.includes('/')) {\r\n    const [day, month, year] = dateString.split('/');\r\n    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\r\n  }\r\n  \r\n  return dateString;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}